d3d11::sphere-renderer {
    # r = ((3 * d * v) / (4 * pi * n))^(1/3) = ((3 * 0.034 * 1000) / (4 * pi * n))^(1/3) = (102 / (4 * pi * n))^(1/3)
    string data_set = pos_rad_intensity : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_intensity : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_intensity : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba8 : 1000 : 42 : 10 10 10 : 0.1 0.3;  pos_rad_rgba8 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba8 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba32 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.1 0.3

    string method = quad_tess; geo_quad; spta

    boolean vs_xfer_function = false; true
    boolean conservative_depth = false; true
    boolean vs_raygen = false; true
    boolean force_float_colour = false


    string manoeuvre = diagonal_x; diagonal_y; diagonal_z; orbit_x; orbit_y; path_x; path_y; path_z; path_sinx; path_siny; path_sinz
    uint32 manoeuvre_steps = 100
    uint32 manoeuvre_step = 0; 4; 9; 14; 19; 24; 29; 34; 39; 44; 49; 54; 59; 64; 69; 74; 79; 84; 89; 94; 99

    uint32vec2 viewport = 512 512; 1024 1024; 2048 2048
    boolean debug_view = false

    uint32 min_wall_time = 500
    uint32 min_prewarms = 4
    uint32 gpu_counter_iterations = 8
}


d3d11::sphere-renderer {
    # r = ((3 * d * v) / (4 * pi * n))^(1/3) = ((3 * 0.034 * 1000) / (4 * pi * n))^(1/3) = (102 / (4 * pi * n))^(1/3)
    string data_set = pos_rad_intensity : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_intensity : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_intensity : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba8 : 1000 : 42 : 10 10 10 : 0.1 0.3;  pos_rad_rgba8 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba8 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba32 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.1 0.3

    string method = quad_inst

    boolean vs_xfer_function = false; true
    boolean conservative_depth = false; true
    boolean vs_raygen = false; true
    boolean force_float_colour = false; true


    string manoeuvre = diagonal_x; diagonal_y; diagonal_z; orbit_x; orbit_y; path_x; path_y; path_z; path_sinx; path_siny; path_sinz
    uint32 manoeuvre_steps = 100
    uint32 manoeuvre_step = 0; 4; 9; 14; 19; 24; 29; 34; 39; 44; 49; 54; 59; 64; 69; 74; 79; 84; 89; 94; 99

    uint32vec2 viewport = 512 512; 1024 1024; 2048 2048
    boolean debug_view = false

    uint32 min_wall_time = 500
    uint32 min_prewarms = 4
    uint32 gpu_counter_iterations = 8
}


d3d11::sphere-renderer {
    # r = ((3 * d * v) / (4 * pi * n))^(1/3) = ((3 * 0.034 * 1000) / (4 * pi * n))^(1/3) = (102 / (4 * pi * n))^(1/3)
    string data_set = pos_rad_intensity : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_intensity : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_intensity : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba8 : 1000 : 42 : 10 10 10 : 0.1 0.3;  pos_rad_rgba8 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba8 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba32 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.1 0.3

    string method = adapt_poly_tess
    float32 adapt_tess_minimum = 4
    float32 adapt_tess_maximum = 16
    float32 adapt_tess_scale = 4

    boolean vs_xfer_function = false; true
    boolean conservative_depth = false; true
    boolean vs_raygen = false; true
    boolean force_float_colour = false


    string manoeuvre = diagonal_x; diagonal_y; diagonal_z; orbit_x; orbit_y; path_x; path_y; path_z; path_sinx; path_siny; path_sinz
    uint32 manoeuvre_steps = 100
    uint32 manoeuvre_step = 0; 4; 9; 14; 19; 24; 29; 34; 39; 44; 49; 54; 59; 64; 69; 74; 79; 84; 89; 94; 99

    uint32vec2 viewport = 512 512; 1024 1024; 2048 2048
    boolean debug_view = false

    uint32 min_wall_time = 500
    uint32 min_prewarms = 4
    uint32 gpu_counter_iterations = 8
}


d3d11::sphere-renderer {
    # r = ((3 * d * v) / (4 * pi * n))^(1/3) = ((3 * 0.034 * 1000) / (4 * pi * n))^(1/3) = (102 / (4 * pi * n))^(1/3)
    string data_set = pos_rad_intensity : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_intensity : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_intensity : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba8 : 1000 : 42 : 10 10 10 : 0.1 0.3;  pos_rad_rgba8 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba8 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba32 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.1 0.3

    string method = poly_tess
    uint32 poly_corners = 4; 5; 6; 7; 8; 16; 32

    boolean vs_xfer_function = false; true
    boolean conservative_depth = false; true
    boolean vs_raygen = false; true
    boolean force_float_colour = false


    string manoeuvre = diagonal_x; diagonal_y; diagonal_z; orbit_x; orbit_y; path_x; path_y; path_z; path_sinx; path_siny; path_sinz
    uint32 manoeuvre_steps = 100
    uint32 manoeuvre_step = 0; 4; 9; 14; 19; 24; 29; 34; 39; 44; 49; 54; 59; 64; 69; 74; 79; 84; 89; 94; 99

    uint32vec2 viewport = 512 512; 1024 1024; 2048 2048
    boolean debug_view = false

    uint32 min_wall_time = 500
    uint32 min_prewarms = 4
    uint32 gpu_counter_iterations = 8
}


d3d11::sphere-renderer {
    # r = ((3 * d * v) / (4 * pi * n))^(1/3) = ((3 * 0.034 * 1000) / (4 * pi * n))^(1/3) = (102 / (4 * pi * n))^(1/3)
    string data_set = pos_rad_intensity : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_intensity : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_intensity : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba8 : 1000 : 42 : 10 10 10 : 0.1 0.3;  pos_rad_rgba8 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba8 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba32 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.1 0.3

    string method = sphere_tess; hemisphere_tess
    float32vec4 edge_tess_factor = 4 4 4 4; 8 8 8 8; 16 16 16 16
    float32vec2 inside_tess_factor = 4 4; 8 8; 16 16
    float32 hemi_tess_scale = 0.5

    boolean vs_xfer_function = false; true
    boolean conservative_depth = false
    boolean vs_raygen = false; true
    boolean force_float_colour = false


    string manoeuvre = diagonal_x; diagonal_y; diagonal_z; orbit_x; orbit_y; path_x; path_y; path_z; path_sinx; path_siny; path_sinz
    uint32 manoeuvre_steps = 100
    uint32 manoeuvre_step = 0; 4; 9; 14; 19; 24; 29; 34; 39; 44; 49; 54; 59; 64; 69; 74; 79; 84; 89; 94; 99

    uint32vec2 viewport = 512 512; 1024 1024; 2048 2048
    boolean debug_view = false

    uint32 min_wall_time = 500
    uint32 min_prewarms = 4
    uint32 gpu_counter_iterations = 8
}


d3d11::sphere-renderer {
    # r = ((3 * d * v) / (4 * pi * n))^(1/3) = ((3 * 0.034 * 1000) / (4 * pi * n))^(1/3) = (102 / (4 * pi * n))^(1/3)
    string data_set = pos_rad_intensity : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_intensity : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_intensity : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_intensity : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba8 : 1000 : 42 : 10 10 10 : 0.1 0.3;  pos_rad_rgba8 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba8 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba8 : 100000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 1000 : 42 : 10 10 10 : 0.1 0.3; pos_rad_rgba32 : 10000 : 42 : 10 10 10 : 0.045 0.135; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.02 0.06; pos_rad_rgba32 : 1000000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.001 0.003; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.01 0.03; pos_rad_rgba32 : 100000 : 42 : 10 10 10 : 0.1 0.3

    string method = adapt_sphere_tess; adapt_hemisphere_tess
    float32 hemi_tess_scale = 0.5
    float32 adapt_tess_minimum = 5
    float32 adapt_tess_maximum = 25
    float32 adapt_tess_scale = 3

    boolean vs_xfer_function = false; true
    boolean conservative_depth = false
    boolean vs_raygen = false; true
    boolean force_float_colour = false


    string manoeuvre = diagonal_x; diagonal_y; diagonal_z; orbit_x; orbit_y; path_x; path_y; path_z; path_sinx; path_siny; path_sinz
    uint32 manoeuvre_steps = 100
    uint32 manoeuvre_step = 0; 4; 9; 14; 19; 24; 29; 34; 39; 44; 49; 54; 59; 64; 69; 74; 79; 84; 89; 94; 99

    uint32vec2 viewport = 512 512; 1024 1024; 2048 2048
    boolean debug_view = false

    uint32 min_wall_time = 500
    uint32 min_prewarms = 4
    uint32 gpu_counter_iterations = 8
}
