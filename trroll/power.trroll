d3d11::sphere-renderer {
	# --trroll power.trroll --power power.csv --output timings.csv

	string data_set = pos_rad_intensity : 50000 : 0 : 10 10 10 : 0.01 0.1; pos_rad_intensity : 500000 : 0 : 10 10 10 : 0.01 0.1; pos_rad_intensity : 5000000 : 0 : 10 10 10 : 0.01 0.1
	uint32 frame = 0
	boolean debug_view = true
	float32 global_radius = 0.07

	uint32vec2 viewport = 512 512; 1024 1024; 2048 2048

	# Adaptation range for "adapt_poly_tess", "adapt_sphere_tess" and "adapt_hemisphere_tess"
	#uint32 adapt_tess_minimum = 4; 5
	#uint32 adapt_tess_maximum = 16; 25
	#float32 adapt_tess_scale = 3; 4
	uint32 adapt_tess_minimum = 4
	uint32 adapt_tess_maximum = 8

	# Fixed tessellation factors for "sphere_tess" and "hemisphere_tess".
	#float32vec4 edge_tess_factor = 4 4 4 4; 8 8 8 8
	#float32vec2 inside_tess_Factor = 4 4; 8 8
	float32vec4 edge_tess_factor = 8 8 8 8
	float32vec2 inside_tess_Factor = 8 8

	# Fixed number of corners in polygon generated by "poly_tess".
	uint32 poly_corners = 5

	# Scaling of tessellation factor from "sphere" to "hemisphere" (and adaptive equivalents).
	float32 hemi_tess_scale = 0.5

	# Binary flags
	boolean conservative_depth = false
	boolean force_float_colour = false
	boolean vs_raygen = true; false
	boolean vs_xfer_function = true

	#string method = quad_inst; poly_tess; adapt_poly_tess; sphere_tess; adapt_sphere_tess; hemisphere_tess; adapt_hemisphere_tess; geo_quad; geo_poly; stpa
	string method = quad_inst; geo_quad; hemisphere_tess; adapt_hemisphere_tess; stpa

	uint32 min_wall_time = 10000

	string manoeuvre = path_z; orbit_y; random
	uint32 manoeuvre_steps = 100
	uint32 iterations = 10
	uint32 manoeuvre_step = 0; 9; 19; 29; 39; 49; 59; 69; 79; 89; 99
}
